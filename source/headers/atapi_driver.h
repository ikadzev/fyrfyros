//
// Created by modnick on 07.12.2024.
//

#ifndef FYRFYROS_ATAPI_DRIVER_H
#define FYRFYROS_ATAPI_DRIVER_H

#include "_flags.h"
#include "macroses.h"

enum pata_type_device{
    fda = 0,
    hda = 1
};

typedef struct pata_ports_chs {
    u16 data_port; // Read/Write PIO data bytes
    u16 features_error_port; // Used to retrieve any error generated by the last ATA command executed
    u16 sector_count_port;
    u16 sector_number_port;
    u16 cylinder_low_port;
    u16 cylinder_high_port;
    u16 drive_head_port;
    u16 command_status_port;
} pata_ports_chs;

typedef struct pata_devise_size {
    byte count_head;
    byte count_sector;
    u16 count_cylinder;
} pata_devise_size;

typedef struct pata_device {
    pata_ports_chs ports;
    pata_devise_size sizes;
} pata_devise;

pata_devise init_device(u16 start_ports);
void read_sectors_chs(pata_devise* device);
void lba28_to_chs(int lba, int *head, int *cylinder, int *sector);
void read_sector_chs();

#endif //FYRFYROS_ATAPI_DRIVER_H
